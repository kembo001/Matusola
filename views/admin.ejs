<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/styles.css" />
    <meta name="robots" content="noindex, nofollow" />
    <title>Admin - Add Vehicle</title>
  </head>
  <body class="min-h-screen bg-gray-50">
    <!-- Header Banner -->
    <header class="bg-white sticky top-0 z-50 shadow-md">
      <div class="max-w-7xl mx-auto px-4 py-3 sm:py-4 sm:px-6 lg:px-8 flex flex-col sm:flex-row justify-between items-center gap-2 sm:gap-0">
        <a href="/" class="text-2xl font-bold text-gray-900 hover:text-gray-700 transition-colors"> Wholesale Cars </a>
        <div class="flex flex-col sm:flex-row items-center gap-2 sm:gap-6 text-sm">
          <a href="https://maps.app.goo.gl/oiKn7Hk6RhoiGgvX9" target="_blank" class="flex items-center text-gray-600 hover:text-gray-900 transition">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            7820 Riverdale drive NW, Ramsey, MN 55303
          </a>
          <div class="flex items-center space-x-2">
            <a href="tel:763-620-1311" class="flex items-center text-gray-600 hover:text-gray-900 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                />
              </svg>
              (763) 620-1311
            </a>
          </div>
        </div>
      </div>
    </header>

    <main class="max-w-4xl mx-auto px-4 py-8">
      <div class="bg-white rounded-xl shadow-md p-6">
        <h1 class="text-2xl font-bold text-gray-900 mb-6">Add New Vehicle</h1>

        <form action="/add-vehicle" method="POST" enctype="multipart/form-data" id="vehicleForm" class="space-y-6">
          <!-- Title Field -->
          <div class="space-y-1">
            <label for="title" class="block text-sm font-medium text-gray-700">Vehicle Title*</label>
            <input
              type="text"
              id="title"
              name="title"
              required
              placeholder="2017 Ford Escape SE 4x4"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>

          <!-- Year, Make, Model, Trim Row -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div class="space-y-1">
              <label for="year" class="block text-sm font-medium text-gray-700">Year*</label>
              <select id="year" name="year" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="">Select Year</option>
                <% for(let y = new Date().getFullYear(); y >= 1990; y--) { %>
                <option value="<%= y %>"><%= y %></option>
                <% } %>
              </select>
            </div>

            <div class="space-y-1">
              <label for="make" class="block text-sm font-medium text-gray-700">Make*</label>
              <input
                type="text"
                id="make"
                name="make"
                required
                placeholder="Ford, Toyota, Kia"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div class="space-y-1">
              <label for="model" class="block text-sm font-medium text-gray-700">Model*</label>
              <input
                type="text"
                id="model"
                name="model"
                required
                placeholder="Escape, Camry, Forte"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div class="space-y-1">
              <label for="trim" class="block text-sm font-medium text-gray-700">Trim</label>
              <input
                type="text"
                id="trim"
                name="trim"
                placeholder="SE, EX-L, LX, Premium"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <!-- Price and Mileage Row -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="space-y-1">
              <label for="price" class="block text-sm font-medium text-gray-700">Price*</label>
              <input
                type="number"
                id="price"
                name="price"
                required
                min="0"
                step="1"
                placeholder="7999, 600, 11877"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div class="space-y-1">
              <label for="mileage" class="block text-sm font-medium text-gray-700">Mileage*</label>
              <input
                type="number"
                id="mileage"
                name="mileage"
                required
                min="0"
                step="1"
                placeholder="102004, 75333"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <!-- VIN and Engine Row -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="space-y-1">
              <label for="vin" class="block text-sm font-medium text-gray-700">VIN</label>
              <input
                type="text"
                id="vin"
                name="vin"
                placeholder="1FMCU9G95HUC49078"
                pattern="[A-HJ-NPR-Z0-9]{17}"
                title="Please enter a valid 17-character VIN"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 uppercase"
              />
            </div>

            <div class="space-y-1">
              <label for="engine" class="block text-sm font-medium text-gray-700">Engine</label>
              <input
                type="text"
                id="engine"
                name="engine"
                placeholder="2.0L I4 F DOHC 16V"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <!-- Transmission, Drivetrain, and Title Status Row -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="space-y-1">
              <label for="transmission" class="block text-sm font-medium text-gray-700">Transmission</label>
              <select id="transmission" name="transmission" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="Automatic">Automatic</option>
                <option value="Manual">Manual</option>
              </select>
            </div>

            <div class="space-y-1">
              <label for="drivetrain" class="block text-sm font-medium text-gray-700">Drivetrain</label>
              <select id="drivetrain" name="drivetrain" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="Not Specified">Not Specified</option>
                <option value="2WD">2WD</option>
                <option value="4WD">4WD</option>
                <option value="AWD">AWD</option>
                <option value="FWD">FWD</option>
                <option value="RWD">RWD</option>
              </select>
            </div>

            <div class="space-y-1">
              <label for="title_status" class="block text-sm font-medium text-gray-700">Title Status</label>
              <select id="title_status" name="title_status" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="Clean">Clean</option>
                <option value="Salvage">Salvage</option>
                <option value="Prior Salvage">Prior Salvage</option>
                <option value="Junk">Junk</option>
                <option value="Rebuilt">Rebuilt</option>
              </select>
            </div>
          </div>

          <!-- Status Field -->
          <div class="space-y-1">
            <label for="status" class="block text-sm font-medium text-gray-700">Status*</label>
            <select id="status" name="status" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
              <option value="available">Available</option>
              <option value="sold">Sold</option>
            </select>
          </div>

          <!-- Image Upload Section -->
          <div class="space-y-2">
            <label for="images" class="block text-sm font-medium text-gray-700">Vehicle Images*</label>
            <input
              type="file"
              id="images"
              name="images"
              multiple
              accept="image/*"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            <div id="imagePreview" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-4">
              <!-- Images will be displayed here -->
            </div>
          </div>

          <button type="submit" class="w-full bg-gray-900 text-white py-3 px-6 rounded-lg hover:bg-gray-800 transition-colors">Add Vehicle</button>
        </form>
      </div>

      <!-- Loading Overlay -->
      <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" style="display: none">
        <div class="bg-white p-6 rounded-lg shadow-xl flex flex-col items-center">
          <div class="w-12 h-12 border-4 border-gray-900 border-t-transparent rounded-full animate-spin mb-4"></div>
          <div class="text-gray-900 font-medium">Uploading vehicle and images...</div>
        </div>
      </div>

      <!-- Vehicle Management Section -->
      <div class="mt-8 bg-white rounded-xl shadow-md p-6">
        <h2 class="text-xl font-bold text-gray-900 mb-6">Manage Vehicles</h2>

        <div class="grid grid-cols-1 gap-4">
          <% vehicles.forEach(vehicle => { %>
          <div class="flex flex-col p-4 border border-gray-200 rounded-lg gap-4">
            <div class="flex justify-between items-start">
              <div class="flex items-center space-x-4">
                <img
                  src="https://wholesalecars.sfo3.cdn.digitaloceanspaces.com/<%= vehicle.images_folder %>/1.jpg?t=<%= Date.now() %>"
                  alt="<%= vehicle.title %>"
                  class="w-24 h-16 object-cover rounded-lg"
                />
                <div>
                  <h3 class="font-medium text-gray-900"><%= vehicle.title %></h3>
                  <p class="text-sm text-gray-500">$<%= vehicle.price.toLocaleString() %> - <%= vehicle.status %></p>
                </div>
              </div>

              <div class="flex items-center space-x-2">
                <button type="button" onclick="toggleImageManager(this, '<%= vehicle.id %>')" class="px-3 py-1 bg-blue-100 text-blue-800 rounded text-sm hover:bg-blue-200 transition-colors">
                  Manage Images (<%= vehicle.imageCount %>)
                </button>
                <button type="button" onclick="openEditModal('<%= vehicle.id %>')" class="px-3 py-1 bg-yellow-100 text-yellow-800 rounded text-sm hover:bg-yellow-200 transition-colors">Edit</button>
                <form action="/delete-vehicle/<%= vehicle.id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this vehicle?');" class="inline">
                  <button type="submit" class="px-3 py-1 bg-red-100 text-red-800 rounded text-sm hover:bg-red-200 transition-colors">Delete</button>
                </form>
              </div>
            </div>

            <!-- Image management section (hidden by default) -->
            <div class="image-management hidden" data-vehicle-id="<%= vehicle.id %>">
              <div class="current-images grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                <!-- Initially only show loading state -->
                <div class="loading-placeholder flex items-center justify-center p-4">
                  <div class="w-8 h-8 border-4 border-gray-900 border-t-transparent rounded-full animate-spin"></div>
                </div>
              </div>

              <div class="mt-4 flex flex-col sm:flex-row items-start sm:items-center space-y-2 sm:space-y-0 sm:space-x-4">
                <div class="flex-1">
                  <input
                    type="file"
                    id="new-images-<%= vehicle.id %>"
                    multiple
                    accept="image/*"
                    class="w-full text-sm file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                  />
                </div>
                <button type="button" class="save-images bg-blue-600 text-white px-4 py-2 rounded-lg text-sm hover:bg-blue-700 transition-colors">Save Changes</button>
              </div>
            </div>
          </div>
          <% }); %>
        </div>
      </div>
    </main>

    <!-- Add Edit Modal -->
    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-xl shadow-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-900">Edit Vehicle</h2>
          <button onclick="closeEditModal()" class="text-gray-500 hover:text-gray-700">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <form id="editVehicleForm" class="space-y-6">
          <input type="hidden" id="editVehicleId" name="id" />

          <!-- Title Field -->
          <div class="space-y-1">
            <label for="editTitle" class="block text-sm font-medium text-gray-700">Vehicle Title*</label>
            <input type="text" id="editTitle" name="title" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
          </div>

          <!-- Year, Make, Model, Trim Row -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div class="space-y-1">
              <label for="editYear" class="block text-sm font-medium text-gray-700">Year*</label>
              <select id="editYear" name="year" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="">Select Year</option>
                <% for(let y = new Date().getFullYear(); y >= 1990; y--) { %>
                <option value="<%= y %>"><%= y %></option>
                <% } %>
              </select>
            </div>

            <div class="space-y-1">
              <label for="editMake" class="block text-sm font-medium text-gray-700">Make*</label>
              <input type="text" id="editMake" name="make" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <div class="space-y-1">
              <label for="editModel" class="block text-sm font-medium text-gray-700">Model*</label>
              <input type="text" id="editModel" name="model" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <div class="space-y-1">
              <label for="editTrim" class="block text-sm font-medium text-gray-700">Trim</label>
              <input type="text" id="editTrim" name="trim" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
            </div>
          </div>

          <!-- Price and Mileage Row -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="space-y-1">
              <label for="editPrice" class="block text-sm font-medium text-gray-700">Price*</label>
              <input
                type="number"
                id="editPrice"
                name="price"
                required
                min="0"
                step="1"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div class="space-y-1">
              <label for="editMileage" class="block text-sm font-medium text-gray-700">Mileage*</label>
              <input
                type="number"
                id="editMileage"
                name="mileage"
                required
                min="0"
                step="1"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>

          <!-- VIN and Engine Row -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div class="space-y-1">
              <label for="editVin" class="block text-sm font-medium text-gray-700">VIN</label>
              <input
                type="text"
                id="editVin"
                name="vin"
                pattern="[A-HJ-NPR-Z0-9]{17}"
                title="Please enter a valid 17-character VIN"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 uppercase"
              />
            </div>

            <div class="space-y-1">
              <label for="editEngine" class="block text-sm font-medium text-gray-700">Engine</label>
              <input type="text" id="editEngine" name="engine" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
            </div>
          </div>

          <!-- Transmission, Drivetrain, and Title Status Row -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="space-y-1">
              <label for="editTransmission" class="block text-sm font-medium text-gray-700">Transmission</label>
              <select id="editTransmission" name="transmission" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="Automatic">Automatic</option>
                <option value="Manual">Manual</option>
              </select>
            </div>

            <div class="space-y-1">
              <label for="editDrivetrain" class="block text-sm font-medium text-gray-700">Drivetrain</label>
              <select id="editDrivetrain" name="drivetrain" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="Not Specified">Not Specified</option>
                <option value="2WD">2WD</option>
                <option value="4WD">4WD</option>
                <option value="AWD">AWD</option>
                <option value="FWD">FWD</option>
                <option value="RWD">RWD</option>
              </select>
            </div>

            <div class="space-y-1">
              <label for="editTitleStatus" class="block text-sm font-medium text-gray-700">Title Status</label>
              <select id="editTitleStatus" name="title_status" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <option value="Clean">Clean</option>
                <option value="Salvage">Salvage</option>
                <option value="Prior Salvage">Prior Salvage</option>
                <option value="Junk">Junk</option>
                <option value="Rebuilt">Rebuilt</option>
              </select>
            </div>
          </div>

          <!-- Status Field -->
          <div class="space-y-1">
            <label for="editStatus" class="block text-sm font-medium text-gray-700">Status*</label>
            <select id="editStatus" name="status" required class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
              <option value="available">Available</option>
              <option value="sold">Sold</option>
            </select>
          </div>

          <div class="flex justify-end space-x-4 pt-6">
            <button type="button" onclick="closeEditModal()" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">Cancel</button>
            <button type="submit" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">Save Changes</button>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Auto-capitalize VIN
      document.getElementById("vin").addEventListener("input", function (e) {
        // Convert to uppercase AND trim whitespace
        this.value = this.value.toUpperCase().trim().replace(/\s+/g, "");
      });

      // Global function for toggling image manager
      window.toggleImageManager = async function (button, vehicleId) {
        const container = button.closest(".flex-col").querySelector(".image-management");
        if (container.classList.contains("hidden")) {
          // Close any other open image managers first
          document.querySelectorAll(".image-management:not(.hidden)").forEach((el) => {
            el.classList.add("hidden");
          });
          container.classList.remove("hidden");

          // Only load images if they haven't been loaded yet
          if (!container.dataset.imagesLoaded) {
            try {
              const response = await fetch(`/get-vehicle-images/${vehicleId}`);
              if (!response.ok) throw new Error("Failed to fetch images");
              const data = await response.json();

              // Clear loading placeholder and render images
              const imagesContainer = container.querySelector(".current-images");
              imagesContainer.innerHTML = data.images
                .map(
                  (image) => `
                <div class="image-container relative group" data-image-num="${image.number}" draggable="true">
                  <img src="${image.url}?t=${Date.now()}" alt="Vehicle image ${image.number}" class="w-full aspect-[4/3] object-cover rounded-lg" />
                  <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex flex-col justify-between p-2">
                    <div class="flex justify-between items-start w-full">
                      <span class="text-white text-sm bg-black bg-opacity-50 px-2 py-1 rounded">Image ${image.number}</span>
                      <button type="button" class="delete-image text-white hover:text-red-500 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              `
                )
                .join("");

              // Mark as loaded and set up drag-drop handlers
              container.dataset.imagesLoaded = "true";
              setupImageHandlers(container);
            } catch (error) {
              console.error("Error loading images:", error);
              container.querySelector(".current-images").innerHTML = `
                <div class="col-span-full text-red-600 text-center py-4">
                  Failed to load images. Please try again.
                </div>
              `;
            }
          }
        } else {
          container.classList.add("hidden");
        }
      };

      function setupImageHandlers(container) {
        const imagesContainer = container.querySelector(".current-images");
        const items = imagesContainer.querySelectorAll(".image-container");
        let draggedItem = null;

        items.forEach((item) => {
          item.addEventListener("dragstart", handleDragStart);
          item.addEventListener("dragend", handleDragEnd);
          item.addEventListener("dragover", handleDragOver);
          item.addEventListener("dragenter", handleDragEnter);
          item.addEventListener("dragleave", handleDragLeave);
          item.addEventListener("drop", handleDrop);

          // Set up delete button handlers
          const deleteBtn = item.querySelector(".delete-image");
          deleteBtn.addEventListener("click", () => {
            if (item.classList.contains("marked-for-deletion")) {
              item.classList.remove("marked-for-deletion");
              item.style.opacity = "1";
              item.style.filter = "none";
            } else {
              item.classList.add("marked-for-deletion");
              item.style.opacity = "0.5";
              item.style.filter = "grayscale(100%)";
            }
          });
        });

        function handleDragStart(e) {
          draggedItem = this;
          this.classList.add("dragging");
          e.dataTransfer.effectAllowed = "move";
          e.dataTransfer.setData("text/plain", this.dataset.imageNum);
        }

        function handleDragEnd(e) {
          this.classList.remove("dragging");
          imagesContainer.querySelectorAll(".image-container").forEach((item) => {
            item.classList.remove("drag-over");
          });
        }

        function handleDragOver(e) {
          e.preventDefault();
          e.dataTransfer.dropEffect = "move";
        }

        function handleDragEnter(e) {
          e.preventDefault();
          if (this !== draggedItem) {
            this.classList.add("drag-over");
          }
        }

        function handleDragLeave(e) {
          this.classList.remove("drag-over");
        }

        function handleDrop(e) {
          e.preventDefault();
          this.classList.remove("drag-over");

          if (this === draggedItem) return;

          const allItems = [...imagesContainer.querySelectorAll(".image-container")];
          const draggedIdx = allItems.indexOf(draggedItem);
          const droppedIdx = allItems.indexOf(this);

          // Update DOM
          if (draggedIdx < droppedIdx) {
            this.parentNode.insertBefore(draggedItem, this.nextSibling);
          } else {
            this.parentNode.insertBefore(draggedItem, this);
          }
        }
      }

      // Add this JavaScript to handle preview and ordering
      document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("vehicleForm");
        const imageInput = document.getElementById("images");
        const previewContainer = document.getElementById("imagePreview");
        let files = []; // Store FileList as array for reordering

        imageInput.addEventListener("change", function (e) {
          files = Array.from(e.target.files);
          updatePreview();
        });

        function updatePreview() {
          previewContainer.innerHTML = "";

          files.forEach((file, index) => {
            const reader = new FileReader();
            const preview = document.createElement("div");
            preview.className = "relative group";
            preview.draggable = true;

            reader.onload = function (e) {
              preview.innerHTML = `
                <img src="${e.target.result}" alt="Preview" class="w-full aspect-[4/3] object-cover rounded-lg">
                <div class="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-between p-2">
                  <span class="text-white text-sm">Image ${index + 1}</span>
                  <button type="button" onclick="removeImage(${index})" class="text-white hover:text-red-500 transition-colors">×</button>
                </div>
              `;
            };

            preview.addEventListener("dragstart", handleDragStart);
            preview.addEventListener("dragover", handleDragOver);
            preview.addEventListener("drop", handleDrop);
            preview.addEventListener("dragend", handleDragEnd);

            reader.readAsDataURL(file);
            previewContainer.appendChild(preview);
          });
        }

        // Drag and drop functionality
        let draggedItem = null;

        function handleDragStart(e) {
          draggedItem = this;
          this.classList.add("opacity-50");
        }

        function handleDragOver(e) {
          e.preventDefault();
        }

        function handleDrop(e) {
          e.preventDefault();
          if (this === draggedItem) return;

          const allItems = [...previewContainer.querySelectorAll(".relative")];
          const draggedIdx = allItems.indexOf(draggedItem);
          const droppedIdx = allItems.indexOf(this);

          const tempFile = files[draggedIdx];
          files.splice(draggedIdx, 1);
          files.splice(droppedIdx, 0, tempFile);

          updatePreview();
        }

        function handleDragEnd(e) {
          this.classList.remove("opacity-50");
        }

        form.addEventListener("submit", function (e) {
          e.preventDefault();
          loadingOverlay.style.display = "flex";

          const formData = new FormData(form);
          formData.delete("images");
          files.forEach((file) => {
            formData.append("images", file);
          });

          fetch("/add-vehicle", {
            method: "POST",
            body: formData,
          })
            .then((response) => {
              if (response.ok) {
                window.location.href = "/admin?success=true";
              } else {
                throw new Error("Upload failed");
              }
            })
            .catch((error) => {
              console.error("Error:", error);
              loadingOverlay.style.display = "none";
              window.location.href = "/admin?error=true";
            });
        });

        window.removeImage = function (index) {
          files.splice(index, 1);
          updatePreview();
          if (files.length === 0) {
            imageInput.value = "";
          }
        };
      });

      async function openEditModal(vehicleId) {
        try {
          const response = await fetch(`/get-vehicle/${vehicleId}`);
          if (!response.ok) throw new Error("Failed to fetch vehicle data");

          const vehicle = await response.json();

          // Populate form fields
          document.getElementById("editVehicleId").value = vehicle.id;
          document.getElementById("editTitle").value = vehicle.title;
          document.getElementById("editYear").value = vehicle.year;
          document.getElementById("editMake").value = vehicle.make;
          document.getElementById("editModel").value = vehicle.model;
          document.getElementById("editTrim").value = vehicle.trim || "";
          document.getElementById("editPrice").value = vehicle.price;
          document.getElementById("editMileage").value = vehicle.mileage;
          document.getElementById("editVin").value = vehicle.vin || "";
          document.getElementById("editEngine").value = vehicle.engine || "";
          document.getElementById("editTransmission").value = vehicle.transmission || "Automatic";
          document.getElementById("editDrivetrain").value = vehicle.drivetrain || "Not Specified";
          document.getElementById("editTitleStatus").value = vehicle.title_status || "Clean";
          document.getElementById("editStatus").value = vehicle.status;

          // Show modal
          document.getElementById("editModal").classList.remove("hidden");
        } catch (error) {
          console.error("Error:", error);
          alert("Failed to load vehicle data");
        }
      }

      function closeEditModal() {
        document.getElementById("editModal").classList.add("hidden");
      }

      document.getElementById("editVehicleForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        const vehicleId = document.getElementById("editVehicleId").value;
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        try {
          const response = await fetch(`/update-vehicle/${vehicleId}`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          if (!response.ok) throw new Error("Failed to update vehicle");

          // Success - reload page to show updated data
          window.location.reload(true);
        } catch (error) {
          console.error("Error:", error);
          alert("Failed to update vehicle");
        }
      });

      // Auto-capitalize VIN in edit form
      document.getElementById("editVin").addEventListener("input", function () {
        // Convert to uppercase AND trim whitespace
        this.value = this.value.toUpperCase().trim().replace(/\s+/g, "");
      });

      // Add save functionality
      document.querySelectorAll(".image-management").forEach((container) => {
        const saveButton = container.querySelector(".save-images");
        const fileInput = container.querySelector('input[type="file"]');
        const vehicleId = container.dataset.vehicleId;

        saveButton.addEventListener("click", async () => {
          const loadingOverlay = document.createElement("div");
          loadingOverlay.className = "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50";
          loadingOverlay.innerHTML = `
            <div class="bg-white p-6 rounded-lg shadow-xl flex flex-col items-center">
              <div class="w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mb-4"></div>
              <div class="text-gray-900 font-medium">Updating images...</div>
            </div>
          `;
          document.body.appendChild(loadingOverlay);

          try {
            const formData = new FormData();
            const imagesContainer = container.querySelector(".current-images");

            // Add files
            if (fileInput.files.length > 0) {
              Array.from(fileInput.files).forEach((file) => {
                formData.append("newImages", file);
              });
            }

            // Add deletions
            const deletedImages = [...imagesContainer.querySelectorAll(".marked-for-deletion")].map((el) => el.dataset.imageNum);
            deletedImages.forEach((num) => {
              formData.append("deletedImages[]", num);
            });

            // Add image order
            const currentOrder = [...imagesContainer.querySelectorAll(".image-container")].map((container) => container.dataset.imageNum).filter((num) => !deletedImages.includes(num));

            if (currentOrder.length > 0) {
              formData.append("imageOrder", JSON.stringify(currentOrder));
            }

            const response = await fetch(`/manage-images/${vehicleId}`, {
              method: "POST",
              body: formData,
              credentials: "include",
            });

            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.details || `HTTP error! status: ${response.status}`);
            }

            const result = await response.json();

            if (result.success) {
              // Add a timestamp to force image refresh
              const timestamp = Date.now();
              imagesContainer.querySelectorAll("img").forEach((img) => {
                const url = new URL(img.src);
                url.searchParams.set("t", timestamp);
                img.src = url.toString();
              });

              // Show success message
              const successMessage = document.createElement("div");
              successMessage.className = "fixed bottom-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded";
              successMessage.textContent = result.message || "Changes saved successfully";
              document.body.appendChild(successMessage);
              setTimeout(() => successMessage.remove(), 3000);

              // Reset file input
              fileInput.value = "";

              // Remove loading overlay
              document.body.removeChild(loadingOverlay);

              // Refresh the page to update image count
              window.location.reload();
            } else {
              throw new Error(result.error || "Unknown error");
            }
          } catch (error) {
            console.error("Error updating images:", error);
            alert(`Failed to update images: ${error.message}`);
            document.body.removeChild(loadingOverlay);
          }
        });
      });
    </script>

    <!-- Add this CSS -->
    <style>
      .image-management {
        margin: 20px 0;
        border-top: 1px solid #eee;
        padding-top: 20px;
      }

      .image-management.hidden {
        display: none;
      }

      .image-container {
        cursor: move;
        transition: transform 0.2s ease, opacity 0.2s ease;
      }

      .image-container.dragging {
        opacity: 0.5;
        transform: scale(0.95);
      }

      .image-container img {
        width: 100%;
        height: 100%;
        transition: transform 0.3s ease;
      }

      .image-container.drag-over {
        transform: scale(1.05);
      }
    </style>
  </body>
</html>
